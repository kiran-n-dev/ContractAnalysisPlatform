name: Deploy to EC2 Securely

on:
  push:
    branches:
      - main # Trigger on push to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:

      - name: Deploy via SSH # Use a secure, pre-built action for SSH
        uses: appleboy/ssh-action@v1.0.1 
        with:
          host: 3.111.215.123
          username: ec2-user 
          password: toor
          
          # The commands to run on the EC2 instance
          script: |
            DEPLOY_DIR="ContractAnalysisPlatform"
            APP_URL="http://3.111.215.123:3000/" # The public URL/IP to check
            
            
            echo "Successfully connected to EC2 instance."
            
            # 1. Stop and Clean up old deployment
            echo "Removing old deployment..."
            if [ -d "$DEPLOY_DIR" ]; then
              cd "$DEPLOY_DIR" && docker-compose down
              sudo rm -rf ~/ContractAnalysisPlatform
            fi
            
            # Assuming ~/dc.sh is a cleanup script, ensure it's non-interactive and safe
            # If it's not essential or causes issues, consider removing or modifying it.
            
            ~/dc.sh # Run your cleanup script (ensure this doesn't hang)
            
            echo "Loding new deployment..."
            
            # 2. Clone new code
            git clone https://github.com/kiran-n-dev/ContractAnalysisPlatform.git
            cd "$DEPLOY_DIR"
            
            # 3. Copy the .env file from EC2 home to the backend directory
            echo "Copying .env file from EC2 home directory to backend/ ..."
            cp "/home/ec2-user/.env" "./backend/.env"
            
            # 4. Start containers in detached mode and rebuild
            echo "Starting Docker Compose up (in detached mode and rebuilding)..."
            docker-compose up --build -d
            
            # 5. Implement a cURL Polling Loop to check for 200 status
            MAX_ATTEMPTS=40  # Max wait time (e.g., 40 attempts * 5 seconds = 200 seconds)
            ATTEMPTS=0
            
            echo "Deployment in progress. Waiting for application readiness at ${APP_URL}..."
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
                HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" ${APP_URL})
                
                if [ "$HTTP_CODE" -eq 200 ]; then
                    echo "üéâ Application is ready! Received status code 200 from ${APP_URL}."
                    break
                fi
                
                echo "Deployment in progress... (Attempt $((ATTEMPTS + 1))/${MAX_ATTEMPTS}) Status code: ${HTTP_CODE}. Retrying in 5 seconds."
                sleep 5 
                ATTEMPTS=$((ATTEMPTS + 1))
            done
            
            # 6. Check final status and exit
            if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Deployment **FAILED**: Application did not return a 200 status code within the time limit."
                exit 1 # Exit with error code to fail the GitHub job
            else
                echo "Deployment finished. Application is fully LIVE and ready for traffic."
                exit 0 # Exit with success code
            fi
